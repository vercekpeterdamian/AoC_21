Hello - from c:\Users\peter\.vscode\extensions\jaredly.reason-vscode-1.7.13\bin.native.exe.hot.exe
Previous log location: C:\Users\peter\AppData\Local\Temp\lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json"}, {"globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","mlfmt":"","format_width":80,"per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/peter/FMF/2._letnik/PROG_1/AoC_21/project_windows.ml","languageId":"ocaml","version":1,"text":"let preberi_datoteko ime_datoteke =\n  let chan = open_in ime_datoteke in\n  let vsebina = really_input_string chan (in_channel_length chan) in\n  close_in chan;\n  vsebina\n\nlet izpisi_datoteko ime_datoteke vsebina =\n  let chan = open_out ime_datoteke in\n  output_string chan vsebina;\n  close_out chan\n\nmodule List = struct\n  include List\n\n  let int_list l = List.map int_of_string l\n\n  let sum l =\n    let rec sum' a = function [] -> a | x :: xs -> sum' (a + x) xs in\n    sum' 0 l\n\n  let lines = String.split_on_char '\\n'\nend\n\nmodule type Solver = sig\n  val naloga1 : string -> string\n\n  val naloga2 : string -> string -> string\nend\n\nmodule Solver0 : Solver = struct\n  let cost_fun x = (x / 3) - 2\n\n  let rec full_cost x =\n    let c_cost = cost_fun x in\n    if c_cost <= 0 then 0 else c_cost + full_cost c_cost\n\n  let naloga1 data =\n    let lines = List.lines data in\n    lines |> List.int_list\n    |> List.fold_left (fun s x -> s + cost_fun x) 0\n    |> string_of_int\n\n  let naloga2 data _part1 =\n    data |> List.lines |> List.int_list |> List.map full_cost |> List.sum\n    |> string_of_int\nend\n\n(* Tukaj re-definirajte funkcijo naloga1 in naloga2 *)\nmodule Solver1 : Solver = struct\n  let naloga1 data = \n    let lines = List.int_list (List.lines data) in\n    let rec aux acc =\n      function\n      | [] -> string_of_int acc\n      | g1 :: g2 :: r when g1 < g2 -> aux (acc + 1) (g2 :: r)\n      | g :: r -> aux acc r\n    in\n    aux 0 lines\n\n  let naloga2 data _part1= \n    let lines = List.int_list (List.lines data) in\n    let rec aux acc = \n      function\n      | [] -> string_of_int acc\n      | g1 :: g2 :: g3 :: g4 :: r when (g1 + g2 + g3) < (g2 + g3 + g4) -> aux (acc + 1) (g2 :: g3 :: g4 :: r)\n      | _ :: r -> aux acc r\n    in\n    aux 0 lines\nend\n\nmodule Solver2 : Solver = struct\n  type premik = Naravnost of int | Dol of int | Gor of int\n\n  let naloga1 data =\n    let lines = List.lines data in\n    let rec aux globina naravnost = function\n      | [] -> string_of_int (globina * naravnost)\n      | g :: r ->\n        let smer = get g 0 and \n        let dolz = get g (-1) and\n        let naredi_premik a =\n\n        | \"f\" -> aux globina (naravnost + x) r\n        | \"u\" -> aux (globina - x) naravnost r\n        | \"d\" -> aux (globina + x) naravnost r\n    in\n    aux 0 0 lines\n\n  let naloga2 data _part1 = \"\"\nend\n\n(* Poženemo zadevo *)\nlet choose_solver : string -> (module Solver) = function\n  | \"0\" -> (module Solver0)\n  | \"1\" -> (module Solver1)\n  | \"2\" -> (module Solver2)\n  | _ -> failwith \"Ni še rešeno\"\n\nlet main () =\n  let day = Sys.argv.(1) in\n  print_endline (\"Solving DAY: \" ^ day);\n  let (module Solver) = choose_solver day in\n  let input_data = preberi_datoteko (\"data/day_\" ^ day ^ \".in\") in\n  let p1_start = Sys.time () in\n  let part1 = Solver.naloga1 input_data in\n  let t1_time = Sys.time () -. p1_start in\n  print_endline \"PART 1:\";\n  print_endline part1;\n  print_endline (\"Taken: \" ^ string_of_float t1_time ^ \"s\");\n  let p2_start = Sys.time () in\n  let part2 = Solver.naloga2 input_data part1 in\n  let t2_time = Sys.time () -. p2_start in\n  print_endline \"PART 2:\";\n  print_endline part2;\n  print_endline (\"Taken: \" ^ string_of_float t2_time ^ \"s\");\n  print_endline (\"Total: \" ^ string_of_float (t1_time +. t2_time) ^ \"s\");\n  izpisi_datoteko (\"out/day_\" ^ day ^ \"_1.out\") part1;\n  izpisi_datoteko (\"out/day_\" ^ day ^ \"_2.out\") part2;\n  ()\n\nlet _ = main ()\n"}}}
